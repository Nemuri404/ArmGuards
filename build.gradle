plugins {
	alias libs.plugins.quilt.loom
}

base.archivesName = project.archives_base_name
version = "${project.version}+${libs.versions.minecraft.get()}"
group = project.maven_group

repositories {
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/releases"
		content {
			includeGroup "com.terraformersmc"
			includeGroup "dev.emi"
		}
	}
	maven {
		name = "Ladysnake"
		url = "https://maven.ladysnake.org/releases"
	}
}

dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }

	modImplementation libs.quilt.loader
	modImplementation libs.quilted.fabric.api

	modCompileOnly libs.mod.menu
	modRuntimeOnly libs.mod.menu

	modImplementation libs.trinkets

	modImplementation libs.cardinal.components.base
}


loom {
	accessWidenerPath = file("src/main/resources/arm_guards.accesswidener")

	runs {
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=arm_guards"

			runDir "build/datagen"
		}
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
				'src/main/generated'
			]
		}
	}
}

processResources {
	inputs.property 'version', version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withSourcesJar()
}